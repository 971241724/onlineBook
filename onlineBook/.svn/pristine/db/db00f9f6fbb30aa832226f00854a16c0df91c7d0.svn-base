package com.b2c.backstage.action;

import java.io.File;
import java.io.IOException;

import javax.annotation.Resource;
import javax.lang.model.element.Element;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.ibatis.jdbc.SQL;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.b2c.backstage.service.IAdminService;
import com.b2c.entity.Admin;
import com.b2c.entity.Book;
import com.b2c.entity.BookType;
import com.b2c.entity.Eval;
import com.b2c.entity.Order;
import com.b2c.entity.User;
import com.b2c.service.IBookService;
import com.b2c.service.IBookTypeService;
import com.b2c.service.IEvalService;
import com.b2c.service.IOrderService;
import com.b2c.service.IUserService;
import com.b2c.utils.PageBean;
import com.fasterxml.jackson.annotation.JsonCreator.Mode;

/**
 * 
 * 管理员action层实体类
 * @author 高欢
 * createTime 2017/08/17
 *
 */
@Controller
public class AdminAction {
	
	final Integer PS = 10;
	final Integer PSL = 15;
	
	@Resource(name="adminServiceImp")
	private IAdminService adminServiceImp;
	
	@Resource(name="bookServiceImp")
	private IBookService bookServiceImp;
	
	@Resource(name="bookTypeServiceImp")
	private IBookTypeService bookTypeServiceImp;
	
	@Resource(name="evalServiceImp")
	private IEvalService evalServiceImp;
	
	@Resource(name="userServiceImp")
	private IUserService userServiceImp;
	
	@Resource(name="orderServiceImp")
	private IOrderService orderServiceImp;
	
	/**
	 * 管理员登录
	 * @return
	 */
	@RequestMapping(value="adminLogin.action")
	public String adminLogin(String admin_no,String admin_pwd,Model model,HttpSession session){
		Admin admin = adminServiceImp.adminLogin(admin_no, admin_pwd);
		if(admin != null){
			session.setAttribute("admin",admin);
			return "forward:/backstage/fruit_manager.jsp";
		}else {
			model.addAttribute("message", "账号密码错误!");
			return "forward:/backstage/login_manager.jsp";
		}
	}
	/**
	 * 判断原始密码是否正确
	 * @param admin_pwd
	 * @param session
	 * @param response
	 * @throws IOException
	 */
	@RequestMapping(value="backstage/selectAdminPwd.action")
	@ResponseBody
	public void selectAdminPwd(String admin_pwd,HttpSession session,HttpServletResponse response) throws IOException{
		Admin admin = (Admin)session.getAttribute("admin");
		Admin adminLogin = adminServiceImp.adminLogin(admin.getAdmin_no(), admin_pwd);
		if(adminLogin == null){
			response.getWriter().write("  * 原始密码错误!");
		}
	}
	/**
	 * 修改管理员密码
	 * @param admin_pwd
	 * @param new_pwd
	 * @param model
	 * @param session
	 * @return
	 */
	@RequestMapping(value="updateAdminPwd.action")
	public String updateAdminPwd(String admin_pwd,String new_pwd,Model model,HttpSession session){
		Admin admin = (Admin)session.getAttribute("admin");
		boolean bool = adminServiceImp.updateAdminPwd(admin.getAdmin_no(), admin_pwd, new_pwd);
		if(bool){
			model.addAttribute("message", "<font style='color:green'>修改成功!</font>");
			return "forward:/backstage/alterpassword.jsp";
		}else {
			model.addAttribute("message", "<font style='color:red'>修改失败!</font>");
			return "forward:/backstage/alterpassword.jsp";
		}
	}
	/**
	 * 查询管理员信息
	 * @param pc
	 * @param model
	 * @return
	 */
	@RequestMapping(value="selectAdmin.action")
	public String selectAdmin(Integer pc,Model model){
		if(pc == null){
			pc = 1;
		}
		PageBean<Admin> page = adminServiceImp.selectAdmin(pc, PS);
		model.addAttribute("page", page);
		return "forward:/backstage/adminlist.jsp";
	}
	/**
	 * 管理员查询图书+分页
	 * @param pc
	 * @param model
	 * @return
	 */
	@RequestMapping(value="adminSelectBook.action")
	public String adminSelectBook(Integer pc,Model model){
		if(pc == null){
			pc = 1;
		}
	    PageBean<Book> page = bookServiceImp.adminSelectBook(pc, PSL);
	    model.addAttribute("page", page);
		return "forward:/backstage/vegetablelist.jsp";
	}
	/**
	 * 管理员删除图书
	 * @param book_id
	 * @return
	 * @throws IOException 
	 */
	@RequestMapping(value="deleteBook.action")
	@ResponseBody
	public void deleteBook(Integer book_id,HttpServletResponse response,Model model) throws IOException{
		boolean bool = bookServiceImp.deleteBook(book_id);
		if(bool){
			response.getWriter().write("删除成功!");
		}
	}
	/**
	 * 管理员获取图书
	 * @return
	 */
	@RequestMapping(value="adminGetBook.action")
	public String adminGetBook(String book_id,Model model){
		Book book = bookServiceImp.getBook_id(book_id);
		System.out.println(book);
		model.addAttribute("book", book);
		return "forward:/backstage/vegetableAlter.jsp";
	}
	/**
	 * 管理员修改图书详细信息
	 * @return
	 */
	@RequestMapping(value="bookAlter.action")
	public String bookAlter(Book book,Model model){
		if(book.getT_Price()!=0){
			book.setDown_sale(1);
		}
		BookType bookType = bookTypeServiceImp.selectBookType(book.getBook_type());
		book.setBook_type_id(bookType.getBookType_id());
		boolean bool = bookServiceImp.bookAlter(book);
		if(bool){
			model.addAttribute("message", "修改成功!");
			return "forward:/backstage/vegetableAlter.jsp";
		}else{
			model.addAttribute("message","修改失败!");
			return "forward:/backstage/vegetableAlter.jsp";
		}
	}
	/**
	 * 管理员修改图书图片
	 * @return
	 * @throws IOException 
	 * @throws IllegalStateException 
	 */
	@RequestMapping(value="saveorupdateBookImages.action")
	public String saveorupdateBookImages(@RequestParam MultipartFile potos,String book_id,Model model,HttpSession session) throws IllegalStateException, IOException{
		if(!potos.isEmpty()){
			String path = session.getServletContext().getRealPath("/bookimages");
			String filename = potos.getOriginalFilename();
			if(filename.endsWith(".jpg") || filename.endsWith(".png")){
				File file = new File(path,filename);
				potos.transferTo(file);
				String dataPath = "bookimages"+"/"+filename;
				System.out.println(book_id);
				boolean bool = bookServiceImp.updateBookImage(book_id, dataPath);
				if(bool){
					model.addAttribute("mes", "图片上传成功");
					return "forward:/backstage/vegetableAlter.jsp";
				}else{
					model.addAttribute("mes", "图片上传失败");
					return "forward:/backstage/vegetableAlter.jsp";
				}
			}else{
				model.addAttribute("mes", "图片上传格式不正确！");
				return "forward:/backstage/vegetableAlter.jsp";
			}
		}else {
			model.addAttribute("mes", "未添加图片");
			return "forward:/backstage/vegetableAlter.jsp";
		}
	}
	/**
	 * 管理员查看评价
	 * @return
	 */
	@RequestMapping(value="adminSelectEval.action")
	public String adminSelectEval(Integer pc,Integer book_id,Model model){
		if(pc == null){
			pc = 1;
		}
		PageBean<Eval> page = evalServiceImp.adminSelectEval(pc, PSL,book_id);
		model.addAttribute("page", page);
		return "forward:/backstage/commentlist.jsp";
	}
	/**
	 * 管理员查询所有用户信息
	 * @param pc
	 * @param model
	 * @return
	 */
	@RequestMapping(value="adminSelectUser.action")
	public String adminSelectUser(Integer pc,Model model){
		if(pc == null){
			pc = 1;
		}
		PageBean<User> page = userServiceImp.adminSelectUser(pc, PSL);
		model.addAttribute("page", page);
		return "forward:/backstage/listAllUsers.jsp";
	}
	/**
	 * 管理员删除用户
	 * @throws IOException 
	 */
	@RequestMapping(value="adminDeleteUser.action")
	public void adminDeleteUser(Integer user_id,HttpServletResponse response) throws IOException{
		boolean bool = userServiceImp.adminDeleteUser(user_id);
		if(bool){
			response.getWriter().write("删除成功!");
		}else{
			response.getWriter().write("删除失败!");
		}
	}
	/**
	 * 管理员添加图书
	 * @return
	 */
	@RequestMapping(value="adminAddBook.action")
	public String bookadd(Book book,Model model,HttpSession session){
	    Book findBook = bookServiceImp.findBook(book.getBook_name());
	    if(findBook!=null){
	    	model.addAttribute("message", "图书已存在!");
			return "forward:/backstage/vegetableAdd.jsp";
	    }else {
	    	BookType bookType = bookTypeServiceImp.selectBookType(book.getBook_type());
			book.setBook_type_id(bookType.getBookType_id());
			Admin admin = (Admin)session.getAttribute("admin");
			if(book.getT_Price()!=0){
				book.setDown_sale(1);
			}
			boolean bool = bookServiceImp.adminAddBook(book);
			System.out.println(book+"===============");
			if(bool){
				Book findBooks = bookServiceImp.findBook(book.getBook_name());
				System.out.println(findBooks+"yyyyyyyyyy");
				session.setAttribute("book_id", findBooks.getBook_id());
				model.addAttribute("message", "添加成功!");
				model.addAttribute("book", book);
				return "forward:/backstage/vegetableAdd.jsp";
			}else {
				model.addAttribute("message", "添加失败!");
				return "forward:/backstage/vegetableAdd.jsp";
			}
		}
	}
	/**
	 * 管理员添加图片
	 * @param potos
	 * @param book_id
	 * @param model
	 * @param session
	 * @return
	 * @throws IllegalStateException
	 * @throws IOException
	 */
	@RequestMapping(value="bookAddImage.action")
	public String bookAddImage(@RequestParam MultipartFile potos,String book_id,Model model,HttpSession session) throws IllegalStateException, IOException{
		System.out.println(book_id+"sssssssssssssssss");
		if(book_id==""||book_id==null||book_id.isEmpty()){
			model.addAttribute("mes", "请先添加图书的基本信息!");
			return "forward:/backstage/vegetableAdd.jsp";
		}else{
			if(!potos.isEmpty()){
				String path = session.getServletContext().getRealPath("/bookimages");
				String filename = potos.getOriginalFilename();
				if(filename.endsWith(".jpg") || filename.endsWith(".png")){
					File file = new File(path,filename);
					potos.transferTo(file);
					String dataPath = "bookimages"+"/"+filename;
					//System.out.println(book_id);
					boolean bool = bookServiceImp.updateBookImage(book_id, dataPath);
					if(bool){
						model.addAttribute("mes", "图片上传成功");
						return "forward:/backstage/vegetableAdd.jsp";
					}else{
						model.addAttribute("mes", "图片上传失败");
						return "forward:/backstage/vegetableAdd.jsp";
					}
				}else{
					model.addAttribute("mes", "图片上传格式不正确！");
					return "forward:/backstage/vegetableAdd.jsp";
				}
			}else {
				model.addAttribute("mes", "未添加图片");
				return "forward:/backstage/vegetableAdd.jsp";
			}
		}
	}
	
	/**
	 * 管理员查询未处理订单
	 * @param pc
	 * @param model
	 * @return
	 */
	@RequestMapping(value="findUnDealOrder.action")	
	public String findUnDealOrder(Integer pc,Model model){
		if(pc == null){
			pc = 1;
		}
	    PageBean<Order> page = orderServiceImp.findUnDealOrder(pc, PSL);
	    model.addAttribute("page", page);
		return "forward:/backstage/unDealBook.jsp";
	}
	/**
	 * 管理员处理订单
	 * @param order_id
	 * @param response
	 * @throws IOException
	 */
	@RequestMapping(value="adminAddOrder.action")
	public void adminAddOrder(Integer order_id,HttpServletResponse response) throws IOException{
		boolean bool = orderServiceImp.adminAddOrder(order_id);
		if(bool){
			response.getWriter().write("更新成功!");
		}else{
			response.getWriter().write("更新失败!");
		}
	}
	
	/**
	 * 管理员查询已处理订单
	 * @param pc
	 * @param model
	 * @return
	 */
	@RequestMapping(value="findDealedOrder.action")	
	public String findDealedOrder(Integer pc,Model model){
		if(pc == null){
			pc = 1;
		}
	    PageBean<Order> page = orderServiceImp.findDealedOrder(pc, PSL);
	    model.addAttribute("page", page);
		return "forward:/backstage/dealedBook.jsp";
	}
}
